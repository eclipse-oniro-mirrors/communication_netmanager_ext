# Copyright (c) 2023-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/communication/netmanager_ext/netmanager_ext_config.gni")

config("net_conn_manager_if_config") {
  include_dirs = [
    "include",
    "include/ipc",
    "$BASE_INNERKITS_ROOT/include",
    "$BASE_INNERKITS_ROOT/netconnclient/include",
    "$BASE_INNERKITS_ROOT/netmanagernative/include",
    "$NETMANAGERNATIVE_ROOT/fwmarkclient/include",
    "$EXT_INNERKITS_ROOT/include",
    "$NETMANAGER_EXT_ROOT/utils/log/include",
  ]

  defines = []
  if (is_double_framework) {
    defines += [ "CONFIG_DUAL_FRAMEWORK" ]
  }
  if (target_cpu == "arm") {
    defines += [ "BINDER_IPC_32BIT" ]
  }
  if (is_standard_system) {
    defines += [ "CONFIG_STANDARD_SYSTEM" ]
  }
  if (defined(build_public_version) && build_public_version) {
    defines += [ "BUILD_PUBLIC_VERSION" ]
  }

  cflags = [
    "-fstack-protector-strong",
    "-D_FORTIFY_SOURCE=2",
    "-O2",
  ]

  cflags_cc = [
    "-fstack-protector-strong",
    "-D_FORTIFY_SOURCE=2",
    "-O2",
  ]
}

ohos_source_set("networkvpn_parcel") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"

  sources = [ "$VPN_INNERKITS_SOURCE_DIR/src/vpn_config.cpp" ]

  include_dirs = [
    "$BASE_INNERKITS_ROOT/include",
    "$BASE_INNERKITS_ROOT/netconnclient/include",
    "$EXT_INNERKITS_ROOT/include",
    "$EXT_INNERKITS_ROOT/netvpnclient/include",
    "$NETMANAGER_EXT_ROOT/utils/log/include",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "netmanager_base:net_conn_parcel",
    "netmanager_base:net_manager_common",
  ]

  part_name = "netmanager_ext"
  subsystem_name = "communication"
}

ohos_shared_library("net_vpn_manager_if") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"

  sources = [
    "$VPN_INNERKITS_SOURCE_DIR/src/ipc/networkvpn_service_proxy.cpp",
    "$VPN_INNERKITS_SOURCE_DIR/src/ipc/vpn_event_callback_stub.cpp",
    "$VPN_INNERKITS_SOURCE_DIR/src/networkvpn_client.cpp",
    "$VPN_INNERKITS_SOURCE_DIR/src/vpn_interface.cpp",
  ]

  public_configs = [ ":net_conn_manager_if_config" ]

  deps = [ ":networkvpn_parcel" ]

  external_deps = [
    "hilog:libhilog",
    "ipc:ipc_single",
    "netmanager_base:fwmark_client",
    "samgr:samgr_proxy",
  ]

  defines = [
    "NETMGR_LOG_TAG = \"NetworkVpn\"",
    "LOG_DOMAIN = 0xD0015B0",
  ]

  if (enable_netmgr_ext_debug) {
    defines += [ "NETMGR_DEBUG" ]
  }

  part_name = "netmanager_ext"
  subsystem_name = "communication"
}
