/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
interface OHOS.NetManagerStandard.InterfaceStateCallback;
sequenceable OHOS.NetManagerStandard.InterfaceConfiguration;
sequenceable OHOS.NetManagerStandard.ConfigurationParcelIpc;
sequenceable OHOS.NetManagerStandard.MacAddressInfo;
sequenceable OHOS.NetManagerStandard.EthernetDeviceInfo;
sequenceable OHOS.NetManagerStandard.EapData;
sequenceable OHOS.NetManagerStandard.EthEapProfile;
interface OHOS.NetManagerStandard.INetEapPostbackCallback;
interface OHOS.NetManagerStandard.INetRegisterEapCallback;
interface OHOS.NetManagerStandard.IEthernetService {
    void GetMacAddress([out] List<MacAddressInfo> macAddrList);
    void SetIfaceConfig([in] String iface, [in] sptr<InterfaceConfiguration> ic);
    void GetIfaceConfig([in] String iface, [out] sptr<InterfaceConfiguration> ifaceConfig);
    void IsIfaceActive([in] String iface, [out] int activeStatus);
    void GetAllActiveIfaces([out] List<String> activeIfaces);
    void ResetFactory();
    void RegisterIfacesStateChanged([in] InterfaceStateCallback cb);
    void UnregisterIfacesStateChanged([in] InterfaceStateCallback cb);
    void SetInterfaceUp([in] String iface);
    void SetInterfaceDown([in] String iface);
    void GetInterfaceConfig([in] String iface, [out] ConfigurationParcelIpc cfg);
    void SetInterfaceConfig([in] String iface, [in] ConfigurationParcelIpc cfg);
    void GetDeviceInformation([out] List<EthernetDeviceInfo> deviceInfoList);
    void RegCustomEapHandler([in] int netType, [in] String regCmd, [in] INetEapPostbackCallback cb);
    void ReplyCustomEapData([in] int eapResult, [in] sptr<EapData> eapData);
    void RegisterCustomEapCallback([in] int netType, [in] INetRegisterEapCallback cb);
    void UnRegisterCustomEapCallback([in] int netType, [in] INetRegisterEapCallback cb);
    void NotifyWpaEapInterceptInfo([in] int netType, [in] sptr<EapData> eapData);
    void StartEthEap([in] int netId, [in] EthEapProfile profile);
    void LogOffEthEap([in] int netId);
}
